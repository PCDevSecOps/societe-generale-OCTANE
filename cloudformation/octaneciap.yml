AWSTemplateFormatVersion: 2010-09-09
Description: Full cIAP OCTANE stack

Parameters:
  VPCName:
    Default: OCTANE-CIAP
    Description: VPC name
    Type: String
  VPCUuid:
    Default: TMP
    Description: VPC uuid
    Type: String
  VPCCidr:
    Default: 10.253.252.0/23
    Description: VPC instances Cidr root
    Type: String
  adminCidr:
    Default: x.y.w.z/00
    Description: VPC where admin instances are
    Type: String
  browsingCidr:
    Default: a.b.c.d/00
    Description: VPC browsing
    Type: String
  admRouteTable:
    Default: rtb-xxxxxxx
    Description: RouteTable to allow admin to communicate with this VPC
    Type: String
  browsingRouteTable:
    Default: rtb-yyyyyyy
    Description: RouteTable to allow browsing to communicate with this VPC
    Type: String
  adminSecurityGroup:
    Default: sg-xxxxxxx
    Description: Security group for admin servers
    Type: 'AWS::EC2::SecurityGroup::Id'
  adminVpc:
    Default: vpc-yyyyyyyy
    Description: VPC where admin instances are
    Type: 'AWS::EC2::VPC::Id'
  browsingVpc:
    Default: vpc-zzzzzzzz
    Description: VPC for browsing
    Type: 'AWS::EC2::VPC::Id'
  sshPublicKey:
    Default: SSH_KEY
    Description: SSH pub key to connect with
    Type: 'AWS::EC2::KeyPair::KeyName'
  zone53:
    AllowedValues:
      - octane-ciap.net.
    Default: octane-ciap.net.
    Type: String
  bl:
    AllowedValues:
      - BL1
      - BL2
    Default: BL1
    Type: String
  env:
    AllowedValues:
      - DEV
      - HML
      - PRD
      - TMP
    Default: TMP
    Type: String
  S3Key:
    Description: The name of the ZIP package
    Type: String
    Default: Lambda/amilookup.zip
  ModuleName:
    Description: The name of the JavaScript file
    Type: String
    Default: amilookup
  S3Bucket:
    Description: The name of the bucket that contains your packaged source
    Type: String
    Default: ciap-octane
  AZ1:
    Description: AZ 1
    Type: String
    Default: "eu-west-1a"
  AZ2:
    Description: AZ 2
    Type: String
    Default: "eu-west-1b"
  instanceTypeUPLB:
    Description: UPLB instance type
    Type: String
    Default: t2.micro
  instanceTypeMIDWAF:
    Description: MIDWAF instance type
    Type: String
    Default: t2.micro
  instanceTypeLOWFW:
    Description: LOWFW instance type
    Type: String
    Default: t2.micro
  instanceTypeLOWMET:
    Description: LOWMET instance type
    Type: String
    Default: c4.xlarge
  instanceTypeMIDVPN:
    Description: MIDVPN instance type
    Type: String
    Default: t2.nano

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - VPC
              - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid

  InternetGateway:
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - IGW
              - !Ref VPCName
              - !Ref VPCUuid
              - IN
              - !Ref bl
              - !Ref env
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
    Type: 'AWS::EC2::InternetGateway'

  LinkInternetGateway:
    DependsOn:
      - InternetGateway
      - VPC
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
    Type: 'AWS::EC2::VPCGatewayAttachment'

  NETAZ1SRV0:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - '0'
        - 'Fn::Cidr':
            - !Ref VPCCidr
            - '6'
            - '6'
      AvailabilityZone: !Ref AZ1
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - NET
              - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - AZ1
              - SRV
              - '0'
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid

  NETAZ1SRV1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - '2'
        - 'Fn::Cidr':
            - !Ref VPCCidr
            - '6'
            - '6'
      AvailabilityZone: !Ref AZ1
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - NET
              - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - AZ1
              - SRV
              - '1'
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid

  NETAZ1SRV2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - '4'
        - 'Fn::Cidr':
            - !Ref VPCCidr
            - '6'
            - '6'
      AvailabilityZone: !Ref AZ1
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - NET
              - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - AZ1
              - SRV
              - '2'
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid

  NETAZ2SRV0:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - '1'
        - 'Fn::Cidr':
            - !Ref VPCCidr
            - '6'
            - '6'
      AvailabilityZone: !Ref AZ2
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - NET
              - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - AZ2
              - SRV
              - '0'
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid

  NETAZ2SRV1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - '3'
        - 'Fn::Cidr':
            - !Ref VPCCidr
            - '6'
            - '6'
      AvailabilityZone: !Ref AZ2
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - NET
              - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - AZ2
              - SRV
              - '1'
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid

  NETAZ2SRV2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - '5'
        - 'Fn::Cidr':
            - !Ref VPCCidr
            - '6'
            - '6'
      AvailabilityZone: !Ref AZ2
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - NET
              - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - AZ2
              - SRV
              - '2'
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid

  PrivateRTB:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - RTB
              - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - PRIVATE
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid

  PublicRTB:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - RTB
              - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - PUBLIC
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid

  PrivaterouteVPCadmin:
    Type: 'AWS::EC2::Route'
    DependsOn: PrivateRTB
    Properties:
      RouteTableId: !Ref PrivateRTB
      DestinationCidrBlock: !Ref adminCidr
      VpcPeeringConnectionId: !Ref adminVPCPeeringConnection

  PublicrouteVPCadmin:
    Type: 'AWS::EC2::Route'
    DependsOn: PublicRTB
    Properties:
      RouteTableId: !Ref PublicRTB
      DestinationCidrBlock: !Ref adminCidr
      VpcPeeringConnectionId: !Ref adminVPCPeeringConnection

  routeadminVPC:
    Type: 'AWS::EC2::Route'
    DependsOn: PrivateRTB
    Properties:
      RouteTableId: !Ref admRouteTable
      DestinationCidrBlock: !Ref VPCCidr
      VpcPeeringConnectionId: !Ref adminVPCPeeringConnection

  PrivaterouteVPCbrowsing:
    Type: 'AWS::EC2::Route'
    DependsOn: PrivateRTB
    Properties:
      RouteTableId: !Ref PrivateRTB
      DestinationCidrBlock: !Ref browsingCidr
      VpcPeeringConnectionId: !Ref browsingVPCPeeringConnection

  PublicrouteVPCbrowsing:
    Type: 'AWS::EC2::Route'
    DependsOn: PublicRTB
    Properties:
      RouteTableId: !Ref PublicRTB
      DestinationCidrBlock: !Ref browsingCidr
      VpcPeeringConnectionId: !Ref browsingVPCPeeringConnection

  routebrowsingVPC:
    Type: 'AWS::EC2::Route'
    DependsOn: PrivateRTB
    Properties:
      RouteTableId: !Ref browsingRouteTable
      DestinationCidrBlock: !Ref VPCCidr
      VpcPeeringConnectionId: !Ref browsingVPCPeeringConnection

  RoutePrivateToPublicGW:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - PublicRTB
      - InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRTB

  SubnetRouteTableAssociationNETAZ1SRV0RTB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref NETAZ1SRV0
      RouteTableId: !Ref PublicRTB
    DependsOn:
      - NETAZ1SRV0
      - PublicRTB

  SubnetRouteTableAssociationNETAZ1SRV1RTB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref NETAZ1SRV1
      RouteTableId: !Ref PrivateRTB

  SubnetRouteTableAssociationNETAZ1SRV2RTB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref NETAZ1SRV2
      RouteTableId: !Ref PrivateRTB

  SubnetRouteTableAssociationNETAZ2SRV0RTB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref NETAZ2SRV0
      RouteTableId: !Ref PublicRTB

  SubnetRouteTableAssociationNETAZ2SRV1RTB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref NETAZ2SRV1
      RouteTableId: !Ref PrivateRTB

  SubnetRouteTableAssociationNETAZ2SRV2RTB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref NETAZ2SRV2
      RouteTableId: !Ref PrivateRTB

  adminVPCPeeringConnection:
    Type: 'AWS::EC2::VPCPeeringConnection'
    Properties:
      VpcId: !Ref adminVpc
      PeerVpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - PCX_ADM
              - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid

  browsingVPCPeeringConnection:
    Type: 'AWS::EC2::VPCPeeringConnection'
    Properties:
      VpcId: !Ref browsingVpc
      PeerVpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - PCX_BROS
              - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid

  SGADM:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access from admin
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref adminCidr
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - SGR
              - ADM
              - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid

  SGUP:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: 'Minimal configuration, will be changed after ansible playbook'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Select
            - '0'
            - 'Fn::Cidr':
                - !Ref VPCCidr
                - '3'
                - '7'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Select
            - '1'
            - 'Fn::Cidr':
                - !Ref VPCCidr
                - '6'
                - '6'
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - SGR
              - UP
              - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid

  SGMID:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: 'Minimal configuration, will be changed after ansible playbook'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Select
            - '1'
            - 'Fn::Cidr':
                - !Ref VPCCidr
                - '3'
                - '7'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Select
            - '2'
            - 'Fn::Cidr':
                - !Ref VPCCidr
                - '3'
                - '7'
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - SGR
              - MID
              - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid

  SGVPN:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: 'Minimal configuration, will be changed after ansible playbook'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Select
            - '1'
            - 'Fn::Cidr':
                - !Ref VPCCidr
                - '3'
                - '7'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - SGR
              - VPN
              - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid

  SGUPVPN:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: VPN Configuration
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Select
            - '0'
            - 'Fn::Cidr':
                - !Ref VPCCidr
                - '3'
                - '7'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Select
            - '1'
            - 'Fn::Cidr':
                - !Ref VPCCidr
                - '3'
                - '7'
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - SGR
              - MID
              - VPN
              - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid

  SGLOW:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: 'Minimal configuration, will be changed after ansible playbook'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Select
            - '2'
            - 'Fn::Cidr':
                - !Ref VPCCidr
                - '3'
                - '7'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - SGR
              - LOW
              - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid

  SGMET:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: 'Minimal configuration, will be changed after ansible playbook'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref VPCCidr
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - SGR
              - MET
              - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid

  VPCInstanceUPLB1AZ1:
    Type: 'AWS::EC2::Instance'
    Metadata:
      Comment: Install a hosting LB server
    Properties:
      ImageId: !GetAtt
        - AMIInfo
        - Id
      SecurityGroupIds:
        - !Ref SGADM
        - !Ref SGUP
      SubnetId: !Ref NETAZ1SRV0
      InstanceType: !Ref instanceTypeUPLB
      KeyName: !Ref sshPublicKey
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - HOSTING
              - UP
              - LB
              - AZ1
              - '1'
        - Key: fonction
          Value: lb
        - Key: stage
          Value: up
        - Key: az
          Value: '1'
        - Key: role
          Value: hosting
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
    DependsOn: SGADM

  VPCInstanceUPLB2AZ1:
    Type: 'AWS::EC2::Instance'
    Metadata:
      Comment: Install a hosting LB server
    Properties:
      ImageId: !GetAtt
        - AMIInfo
        - Id
      SecurityGroupIds:
        - !Ref SGADM
        - !Ref SGUP
      SubnetId: !Ref NETAZ1SRV0
      InstanceType: !Ref instanceTypeUPLB
      KeyName: !Ref sshPublicKey
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - HOSTING
              - UP
              - LB
              - AZ1
              - '2'
        - Key: fonction
          Value: lb
        - Key: stage
          Value: up
        - Key: az
          Value: '1'
        - Key: role
          Value: hosting
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
    DependsOn: SGADM

  VPCInstanceMIDWAF1AZ1:
    Type: 'AWS::EC2::Instance'
    Metadata:
      Comment: Install a hosting WAF server
    Properties:
      ImageId: !GetAtt
        - AMIInfo
        - Id
      SecurityGroupIds:
        - !Ref SGADM
        - !Ref SGMID
      SubnetId: !Ref NETAZ1SRV1
      InstanceType: !Ref instanceTypeMIDWAF
      KeyName: !Ref sshPublicKey
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - HOSTING
              - MID
              - WAF
              - AZ1
              - '1'
        - Key: fonction
          Value: waf
        - Key: stage
          Value: mid
        - Key: az
          Value: '1'
        - Key: role
          Value: hosting
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
    DependsOn: SGADM

  VPCInstanceMIDWAF2AZ1:
    Type: 'AWS::EC2::Instance'
    Metadata:
      Comment: Install a hosting WAF server
    Properties:
      ImageId: !GetAtt
        - AMIInfo
        - Id
      SecurityGroupIds:
        - !Ref SGADM
        - !Ref SGMID
      SubnetId: !Ref NETAZ1SRV1
      InstanceType: !Ref instanceTypeMIDWAF
      KeyName: !Ref sshPublicKey
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - HOSTING
              - MID
              - WAF
              - AZ1
              - '2'
        - Key: fonction
          Value: waf
        - Key: stage
          Value: mid
        - Key: az
          Value: '1'
        - Key: role
          Value: hosting
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
    DependsOn: SGADM

  VPCInstanceLOWFW1AZ1:
    Type: 'AWS::EC2::Instance'
    Metadata:
      Comment: Install a hosting FW server
    Properties:
      ImageId: !GetAtt
        - AMIInfo
        - Id
      SecurityGroupIds:
        - !Ref SGADM
        - !Ref SGLOW
      SubnetId: !Ref NETAZ1SRV2
      InstanceType: !Ref instanceTypeLOWFW
      KeyName: !Ref sshPublicKey
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - HOSTING
              - LOW
              - FW
              - AZ1
              - '1'
        - Key: fonction
          Value: fw
        - Key: stage
          Value: low
        - Key: az
          Value: '1'
        - Key: role
          Value: hosting
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
    DependsOn: SGADM

  VPCInstanceLOWFW2AZ1:
    Type: 'AWS::EC2::Instance'
    Metadata:
      Comment: Install a hosting FW server
    Properties:
      ImageId: !GetAtt
        - AMIInfo
        - Id
      SecurityGroupIds:
        - !Ref SGADM
        - !Ref SGLOW
      SubnetId: !Ref NETAZ1SRV2
      InstanceType: !Ref instanceTypeLOWFW
      KeyName: !Ref sshPublicKey
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - HOSTING
              - LOW
              - FW
              - AZ1
              - '2'
        - Key: fonction
          Value: fw
        - Key: stage
          Value: low
        - Key: az
          Value: '1'
        - Key: role
          Value: hosting
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
    DependsOn: SGADM

  VPCInstanceLOWMET1AZ1:
    Type: 'AWS::EC2::Instance'
    Metadata:
      Comment: Install a hosting metrology server
    Properties:
      ImageId: !GetAtt
        - AMIInfo
        - Id
      SecurityGroupIds:
        - !Ref SGADM
        - !Ref SGMET
        - !Ref SGLOW
      SubnetId: !Ref NETAZ1SRV2
      InstanceType: !Ref instanceTypeLOWMET
      KeyName: !Ref sshPublicKey
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - HOSTING
              - LOW
              - MET
              - AZ1
              - '1'
        - Key: fonction
          Value: met
        - Key: stage
          Value: low
        - Key: az
          Value: '1'
        - Key: role
          Value: hosting
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
    DependsOn: SGADM

  VPCInstanceMIDVPN1AZ1:
    Type: 'AWS::EC2::Instance'
    Metadata:
      Comment: Install a hosting VPN server
    Properties:
      ImageId: !GetAtt
        - AMIInfo
        - Id
      SecurityGroupIds:
        - !Ref SGADM
        - !Ref SGVPN
      SubnetId: !Ref NETAZ1SRV1
      InstanceType: !Ref instanceTypeMIDVPN
      KeyName: !Ref sshPublicKey
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - HOSTING
              - MID
              - VPN
              - AZ1
              - '1'
        - Key: fonction
          Value: vpn
        - Key: stage
          Value: mid
        - Key: az
          Value: '1'
        - Key: role
          Value: hosting
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
    DependsOn: SGADM

  NLBUP:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: 'true'
      Scheme: internet-facing
      Subnets:
        - !Ref NETAZ1SRV0
        - !Ref NETAZ2SRV0
      Type: network
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - HOSTING
              - NLB
              - UP
        - Key: az
          Value: '0'
        - Key: role
          Value: hosting
        - Key: stage
          Value: up
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
    DependsOn: SGADM

  NLBUPListener80:
    DependsOn:
      - NLBUPTargetGroup80
      - NLBUP
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref NLBUPTargetGroup80
          Type: forward
      LoadBalancerArn: !Ref NLBUP
      Port: '80'
      Protocol: TCP
    Type: 'AWS::ElasticLoadBalancingV2::Listener'

  NLBUPListener443:
    DependsOn:
      - NLBUPTargetGroup443
      - NLBUP
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref NLBUPTargetGroup443
          Type: forward
      LoadBalancerArn: !Ref NLBUP
      Port: '443'
      Protocol: TCP
    Type: 'AWS::ElasticLoadBalancingV2::Listener'

  NLBUPTargetGroup80:
    DependsOn:
      - VPC
      - NLBUP
    Properties:
      Port: 80
      Protocol: TCP
      Targets:
        - Id: !Ref VPCInstanceUPLB1AZ1
          Port: 80
        - Id: !Ref VPCInstanceUPLB2AZ1
          Port: 80
      TargetType: instance
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - TGT
              - NLBUP
              - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - 80
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
        - Key: role
          Value: hosting
        - Key: stage
          Value: up
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'

  NLBUPTargetGroup443:
    DependsOn:
      - VPC
      - NLBUP
    Properties:
      Port: 443
      Protocol: TCP
      Targets:
        - Id: !Ref VPCInstanceUPLB1AZ1
          Port: 443
        - Id: !Ref VPCInstanceUPLB2AZ1
          Port: 443
      TargetType: instance
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - TGT
              - NLBUP
              - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - 443
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
        - Key: role
          Value: hosting
        - Key: stage
          Value: up
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'

  CLBUPMID:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      Listeners:
        - LoadBalancerPort: '65000'
          InstancePort: '65000'
          Protocol: TCP
          InstanceProtocol: TCP
      HealthCheck:
        Target: 'TCP:65000'
        HealthyThreshold: '2'
        UnhealthyThreshold: '3'
        Interval: '10'
        Timeout: '5'
      Scheme: Internal
      Instances:
        - !Ref VPCInstanceMIDWAF1AZ1
        - !Ref VPCInstanceMIDWAF2AZ1
      Subnets:
        - !Ref NETAZ1SRV1
      SecurityGroups:
        - !Ref SGUP
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - HOSTING
              - CLB
              - UP
              - MID
        - Key: az
          Value: '0'
        - Key: role
          Value: hosting
        - Key: stage
          Value: upmid
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
    DependsOn: SGADM

  CLBUPVPN:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      HealthCheck:
        Target: 'TCP:65000'
        HealthyThreshold: '2'
        UnhealthyThreshold: '3'
        Interval: '10'
        Timeout: '5'
      Listeners:
        - LoadBalancerPort: '443'
          InstancePort: '443'
          Protocol: TCP
          InstanceProtocol: TCP
      Scheme: Internal
      Instances:
        - !Ref VPCInstanceMIDVPN1AZ1
      Subnets:
        - !Ref NETAZ1SRV1
      SecurityGroups:
        - !Ref SGUPVPN
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - HOSTING
              - CLB
              - UP
              - VPN
        - Key: az
          Value: '0'
        - Key: role
          Value: hosting
        - Key: stage
          Value: upvpn
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
    DependsOn: SGADM

  CLBMIDLOW:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      Listeners:
        - LoadBalancerPort: '65000'
          InstancePort: '65000'
          Protocol: TCP
          InstanceProtocol: TCP
      HealthCheck:
        Target: 'TCP:65000'
        HealthyThreshold: '2'
        UnhealthyThreshold: '3'
        Interval: '10'
        Timeout: '5'
      Scheme: Internal
      Instances:
        - !Ref VPCInstanceLOWFW1AZ1
        - !Ref VPCInstanceLOWFW2AZ1
      Subnets:
        - !Ref NETAZ1SRV2
      SecurityGroups:
        - !Ref SGMID
      Tags:
        - Key: Name
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - HOSTING
              - CLB
              - MID
              - LOW
        - Key: az
          Value: '1'
        - Key: stage
          Value: midlow
        - Key: role
          Value: hosting
        - Key: infra
          Value: !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
    DependsOn: SGMID

  dnsRecordVPCInstanceUPLB1AZ1:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneName: !Ref zone53
      Name: !Join
        - .
        - - !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - HOSTING
              - UP
              - LB
              - '1'
          - !Ref zone53
      Type: CNAME
      TTL: '900'
      ResourceRecords:
        - !Join
          - ''
          - - !GetAtt
              - VPCInstanceUPLB1AZ1
              - PrivateDnsName
            - .

  dnsRecordVPCInstanceUPLB2AZ1:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneName: !Ref zone53
      Name: !Join
        - .
        - - !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - HOSTING
              - UP
              - LB
              - '2'
          - !Ref zone53
      Type: CNAME
      TTL: '900'
      ResourceRecords:
        - !Join
          - ''
          - - !GetAtt
              - VPCInstanceUPLB2AZ1
              - PrivateDnsName
            - .

  dnsRecordVPCInstanceMIDVPN1AZ1:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneName: !Ref zone53
      Name: !Join
        - .
        - - !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - HOSTING
              - MID
              - VPN
              - '1'
          - !Ref zone53
      Type: CNAME
      TTL: '900'
      ResourceRecords:
        - !Join
          - ''
          - - !GetAtt
              - VPCInstanceMIDVPN1AZ1
              - PrivateDnsName
            - .

  dnsRecordVPCInstanceMIDWAF1AZ1:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneName: !Ref zone53
      Name: !Join
        - .
        - - !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - HOSTING
              - MID
              - WAF
              - '1'
          - !Ref zone53
      Type: CNAME
      TTL: '900'
      ResourceRecords:
        - !Join
          - ''
          - - !GetAtt
              - VPCInstanceMIDWAF1AZ1
              - PrivateDnsName
            - .

  dnsRecordVPCInstanceMIDWAF2AZ1:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneName: !Ref zone53
      Name: !Join
        - .
        - - !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - HOSTING
              - MID
              - WAF
              - '2'
          - !Ref zone53
      Type: CNAME
      TTL: '900'
      ResourceRecords:
        - !Join
          - ''
          - - !GetAtt
              - VPCInstanceMIDWAF2AZ1
              - PrivateDnsName
            - .

  dnsRecordVPCInstanceLOWFW1AZ1:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneName: !Ref zone53
      Name: !Join
        - .
        - - !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - HOSTING
              - LOW
              - FW
              - '1'
          - !Ref zone53
      Type: CNAME
      TTL: '900'
      ResourceRecords:
        - !Join
          - ''
          - - !GetAtt
              - VPCInstanceLOWFW1AZ1
              - PrivateDnsName
            - .

  dnsRecordVPCInstanceLOWMET1AZ1:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneName: !Ref zone53
      Name: !Join
        - .
        - - !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - HOSTING
              - LOW
              - MET
              - '1'
          - !Ref zone53
      Type: CNAME
      TTL: '900'
      ResourceRecords:
        - !Join
          - ''
          - - !GetAtt
              - VPCInstanceLOWMET1AZ1
              - PrivateDnsName
            - .

  dnsRecordCLBUPMIDAZ1:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneName: !Ref zone53
      Name: !Join
        - .
        - - !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - HOSTING
              - CLB
              - UP
              - MID
          - !Ref zone53
      Type: CNAME
      TTL: '900'
      ResourceRecords:
        - !Join
          - ''
          - - !GetAtt
              - CLBUPMIDAZ1
              - DNSName
            - .

  dnsRecordCLBMIDLOWAZ1:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneName: !Ref zone53
      Name: !Join
        - .
        - - !Join
            - _
            - - !Ref VPCName
              - !Ref VPCUuid
              - !Ref bl
              - !Ref env
              - HOSTING
              - CLB
              - MID
              - LOW
          - !Ref zone53
      Type: CNAME
      TTL: '900'
      ResourceRecords:
        - !Join
          - ''
          - - !GetAtt
              - CLBMIDLOWAZ1
              - DNSName
            - .

  AMIInfo:
    Type: 'Custom::AMIInfo'
    Properties:
      ServiceToken: !GetAtt
        - AMIInfoFunction
        - Arn
      Region: !Ref 'AWS::Region'
      OSType: linux
  AMIInfoFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3Key
      Handler: !Join
        - ''
        - - !Ref ModuleName
          - .handler
      Role: !GetAtt
        - LambdaExecutionRole
        - Arn
      Runtime: nodejs6.10
      Timeout: '10'

  LambdaExecutionRole: